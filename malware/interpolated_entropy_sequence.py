import os
import numpy as np


class InterpolatedEntropySequence:
    def __init__(self, window_size=1024, stride=512, number_of_features=100):
        self.window_size = window_size
        self.stride = stride
        self.number_of_features = number_of_features

        self.features = None

    def fit(self, file_path):
        if not os.path.isfile(file_path):
            raise Exception(f"[ERROR] Invalid file path. [{file_path}]")

        with open(file_path, "rb") as file_descriptor:
            byte_sequence = list(file_descriptor.read())

        subsequence_list = self._slide_window(byte_sequence)
        entropy_sequence = self._get_entropy_sequence(subsequence_list)

        self.features = self._interpolate(entropy_sequence)

    def _slide_window(self, byte_sequence):
        subsequence_list = list()

        for index in range(0, len(byte_sequence) - self.window_size + 1, self.stride):
            subsequence = byte_sequence[index: index + self.window_size]

            subsequence_list.append(subsequence)

        return subsequence_list

    def _get_entropy_sequence(self, subsequence_list):
        entropy_sequence = list()

        for subsequence in subsequence_list:
            byte_histogram = np.zeros(256)
            for byte_value in subsequence:
                byte_histogram[byte_value] += 1

            byte_frequency = (byte_histogram / len(subsequence)) + 1e-10

            entropy = self._get_entropy(byte_frequency)
            entropy_sequence.append(entropy)

        return entropy_sequence

    def _interpolate(self, entropy_sequence):
        interpolated_sequence = np.interp(np.linspace(0, len(entropy_sequence) - 1, self.number_of_features),
                                          range(0, len(entropy_sequence)), entropy_sequence)

        return interpolated_sequence

    @staticmethod
    def _get_entropy(byte_frequency):
        return -np.sum(np.log(byte_frequency) * byte_frequency)

    def get_string(self):
        if self.features is None:
            return None

        features = list()
        for index, value in enumerate(self.features):
            features.append(f"{index}:{value}")

        return " ".join(features)
